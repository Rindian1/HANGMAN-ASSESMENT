from colorama import Fore   
from google import genai 
from google.genai import types 
import os 


def cls(): #clears teh screen based on the operating system
    os.system('cls' if os.name=='nt' else 'clear')


key = open("API key genai","r").read() #Reads the API key from a file
client = genai.Client(api_key=key) #Accesses API key


def generate(difficulty):   #Generates a word based on difficulty level 
    history = open('Hangman Word History.csv','r').read() #Reads the history file 

    sys_instruct = "Give a word based on difficulty for hangman, give A SINGULAR WORD, WITH NOTHING ELSE ATTATCHED. Easy words MUST be 4-5 words, Medium words MUST be 6-7, Hard words MUST be 8+ , Xhard should be very hard to guess. \n DO NOT GIVE THE FOLLOWING WORDS" + history #System instructions

    response = client.models.generate_content(model="gemini-2.0-flash", #Accesses api model
    config=types.GenerateContentConfig(system_instruction=sys_instruct), #This is where the system instruction is inputted
    contents=["Give a " + difficulty + " word"]) #This is where the prompt is inputted
    

    return remove_non_alpha(response.text) #Returns the word generated by the api, with all non-alphabetical characters removed
 
def hint(word): #Generates a hint WITHOUT including the word in it
    sys_instruct = "Give the definition of a word. It should NOT include the word in the definition." #System instructions

    response = client.models.generate_content(
    model="gemini-2.0-flash",
    config=types.GenerateContentConfig(system_instruction=sys_instruct), 
    contents=["Give the definition of " + word+" DO NOT INCLUDE WORD IN DEFINITION"])  #inputting system instructions

    print(Fore.CYAN + "HINT: "+response.text) # outputting hint

def initialise(): #Initialises all variables and settings for the game
    global tries, words, blanks, used_chars, player_score,word,play_again 

    cls()

    #Initialises all variables 

    tries = 6 
    word = ""
    blanks = []
    used_chars = []   
    player_score = 0 
    word = 'book'
    difficulty = ''  
    play_again = ''   
    print(Fore.GREEN + "\bWELCOME TO HANGMAN. You have six chances, and you will get a hint at 3 misguesses. \nGuess the word!\n") 
    print("You can view your previous attempts in the Hangman History.csv file\n")
    while difficulty not in ['easy','medium','hard','xhard']: 
        difficulty = input("Enter the difficulty level (easy, medium, hard, xhard): ")  #Collects difficulty level from user
    
    word = generate(difficulty).lower()  #Generates a word based on difficult through gemini api, and decapitalizes it
    for i in range(len(word)):    #Adds a sufficient amount of underscores to the blanks list based on the length of the word
        blanks.append("_")  
    add_CSV('word') #Adds the word to the word history file
    cls()
    
    return difficulty 


def Check(guess, word, blanks):
    global player_score
    if guess in word:
        player_score += 10 * len(guess)  # Increase score based on the length of the guess 
        print(Fore.BLUE + "Score inreased by " + str(10 *len(guess)))
        start = 0
        while start < len(word): #loops through the blanks list, and replaces the blanks with correct guesses.
            start = word.find(guess, start)
            if start == -1:
                break
            for i in range(len(guess)):
                blanks[start + i] = guess[i]
            start += len(guess)
        return blanks
    else:
        return False

def remove_non_alpha(input_string):
    """Removes non-alphabetic characters using slicing."""
    cleaned_string = ""
    for char in input_string:
        if 'a' <= char <= 'z' or 'A' <= char <= 'Z':
            cleaned_string += char
    return cleaned_string     

def formatList(list):  #Turns the blanks list ([_,_,_]) into a readable string (_ _ _))
    formatted_string = ""
    for element in range(len(list)):  
        formatted_string += list[element] + " "   #Simply adds a space after every element in the blanks list, and adds it to a string
    return formatted_string #Returns the formatted string

def add_CSV(mode):  
    if mode == 'main':
        with open('Hangman History.csv','a') as fd:  
            fd.write("Difficulty: "+ difficulty +" Player score: "+str(player_score)+" Word: "+word+"\n") #Writes the player score to a file  
    elif mode == 'word':
        with open('Hangman Word History.csv','a') as fd:  
            fd.write(word+"\n")

while True: #Main Loop
    difficulty = initialise() #Sets up all variables for game, and collects difficulty level from user 
    while tries > 0:   #While the player has tries left, the main loop will run
        if player_score < 0: 
            player_score = 0
        print(Fore.BLUE + "Your score: ",player_score,"\n") #Prints player score in blue
        print(Fore.GREEN + formatList(blanks),Fore.RED+ '\nUsed characters: ',used_chars,"\n")  
        #Formats the blanks list by turning it into a readable list (in green), followed by the characters already used by the player

        guess = input('Enter a guess: ')  #Requests for a guess from the player. 
        cls()
        if guess.isalpha() == False or guess in used_chars or guess in blanks: #Checks if the guess is valid.
            print('Please enter a valid input (alphabetical, not used before)')
            continue 

        if Check(guess, word, blanks) == False:   #If the check function returns false, the player looses a try.
            player_score -= 10
            used_chars.append(guess)
            tries -= 1 
            print("Incorrect Guess! '" + guess + "' was NOT in the word!") 
            print(Fore.BLUE + "-10 FROM SCORE! ")
            print('You have',tries,'tries left')  
            if tries == 3: #If the player has 3 tries left, chat gpt will generate a hint based on the word
                hint(word)  

        elif '_' not in blanks:   #If there are no more blanks left, the player wins.

            print("\nScore: ",player_score,'\n') #Prints player score
            print('You win!, The word was',word,"Your score is",player_score,"\n") # Prints the win message 
            add_CSV('main')
            break    
        

    if tries == 0: 
        print('You lose, The word was',word) 

    while play_again not in ['yes','no']: #Asks the player if they would like to play again, and will repeat until the player inputs a valid answer
        play_again = input('Do you want to play again? (yes/no)')  

    if play_again == 'no':   
        cls()
        print('Thanks for playing!')
        break 
    else: 
        continue #restarts the game
